---
title: "team_04.qmd"
format: 
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
    warning: false
author: "Ashsyahid, Owen, Sherwyn, Xuan Yu, Nigel"
number_sections: false
knitr:
  opts_chunk:
    message: false
---
# This one is done for the time being except the animation
```{r}
#| warning: false
#| echo: false
library(ncdf4)
library(reshape2)
library(plotly)

# Open the NetCDF file
ncfile <- nc_open("data/gistemp1200_GHCNv4_ERSSTv5.nc")

# Extract variables
lat <- ncvar_get(ncfile, "lat")
lon <- ncvar_get(ncfile, "lon")
time <- ncvar_get(ncfile, "time")
anomaly <- ncvar_get(ncfile, "tempanomaly")

# Extract attributes
scale_factor <- ncatt_get(ncfile, "tempanomaly", "scale_factor")$value
fill_value <- ncatt_get(ncfile, "tempanomaly", "_FillValue")$value

# Convert time variable to date
time_units <- ncatt_get(ncfile, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
date <- origin + time

# Apply scale factor and handle missing values
anomaly <- ifelse(anomaly == fill_value, NA, anomaly) * scale_factor

# Reshape the data into a long format dataframe
df <- expand.grid(lon = lon, lat = lat, time = date)
df$anomaly <- as.vector(anomaly)

# Close the NetCDF file
nc_close(ncfile)

# Display the first few rows of the dataframe
head(df)


# Assuming 'df' is already defined as your dataframe with temperature anomaly data

# Filter data for the desired date (example date)
date_to_plot <- as.Date("2024-04-15")
df_subset <- df[df$time == date_to_plot, ]

# Create the plot
plot <- plot_ly(df_subset, type = "scattergeo", mode = "markers",
                lon = ~lon, lat = ~lat,
                marker = list(size = 10,
                              symbol = "square",
                              opacity = 0.1,
                              color = ~anomaly,
                              colorscale = "RdBu",
                              colorbar = list(title = "Temperature Anomaly (C)")),
                text = paste("Longitude: ", df_subset$lon, "<br>Latitude: ", df_subset$lat,
                             "<br>Temperature Anomaly: ", df_subset$anomaly)) %>%
  layout(
    title = paste("Temperature Anomaly on", date_to_plot),
    geo = list(
      projection = list(type = "natural earth"),
      showcountries = TRUE,  # Show country borders
      countrycolor = "black",  # Country border color
      showframe = FALSE
    )
  )

# Show the plot
plot

# Create the 3D globe plot
plot <- plot_ly(df_subset, type = "scattergeo",
                lon = ~lon, lat = ~lat,
                marker = list(
                  size = 10,
                  symbol = "circle",
                  opacity = 0.5,
                  color = ~anomaly,
                  colorscale = "RdBu",
                  colorbar = list(title = "Temperature Anomaly (C)")
                ),
                text = paste("Longitude: ", df_subset$lon, "<br>Latitude: ", df_subset$lat,
                             "<br>Temperature Anomaly: ", df_subset$anomaly)) %>%
  layout(
    title = paste("Temperature Anomaly on", date_to_plot),
    geo = list(
      projection = list(
        type = "orthographic",  # Use orthographic projection for 3D globe effect
        rotation = list(lon = 0, lat = 0, roll = 0)  # Set initial view
      ),
      showcountries = TRUE,
      countrycolor = "rgb(50, 50, 50)"
    )
  )

# Show the plot
plot
```

# How to animate the plot
```{r}
#| warning: false
#| echo: false
library(ncdf4)
library(reshape2)
library(plotly)

set.seed(123)  # Setting seed for reproducibility

# Generate random data: Temperature anomalies over different years for specific locations
n <- 100  # Number of data points
df_subset <- data.frame(
  lon = runif(n, min = -180, max = 180),  # Random longitudes
  lat = runif(n, min = -90, max = 90),    # Random latitudes
  year = sample(seq(2000, 2020, by = 5), n, replace = TRUE),  # Random years between 2000 and 2020
  anomaly = runif(n, min = -5, max = 5)   # Random anomalies between -5 and 5 degrees Celsius
)

# Create the 3D globe plot
plot <- plot_ly(df_subset) %>%
  add_trace(
    type = "scattergeo",
    mode = "markers",
    lon = ~lon,
    lat = ~lat,
    frame = ~year,
    marker = list(
      size = 10,
      symbol = "circle",
      opacity = 0.5,
      color = ~anomaly,
      colorscale = "RdBu",
      colorbar = list(title = "Temperature Anomaly (째C)")
    ),
    text = ~paste("Longitude: ", lon, "<br>Latitude: ", lat, "<br>Temperature Anomaly: ", anomaly)
  ) %>%
  layout(
    title = "Temperature Anomaly Over Time",
    geo = list(
      projection = list(
        type = "orthographic",
        rotation = list(lon = 0, lat = 0, roll = 0)
      ),
      showcountries = TRUE,
      countrycolor = "rgb(50, 50, 50)"
    )
  ) %>%
  animation_opts(
    frame = 1000,  # Duration of each frame in milliseconds
    transition = 0,  # Duration of transition between frames
    easing = "linear"  # Animation easing function
  ) %>%
  animation_slider(
    currentvalue = list(prefix = "Year: ", font = list(size = 20))
  )

# Show the plot
plot

```

```{r}
#| warning: false
#| echo: false
#| include: false

library(terra)
library(giscoR)
library(sf)
library(classInt)
library(tidyverse)
library(tidyterra)
library(colorspace)
library(plotly)
library(ncdf4)


destfile <- "data/gistemp1200_GHCNv4_ERSSTv5.nc"

ncfile <- nc_open(destfile)

lat <- ncvar_get(ncfile, "lat")
lon <- ncvar_get(ncfile, "lon")
anomaly <- ncvar_get(ncfile, "tempanomaly")
time <- ncvar_get(ncfile, "time")

time_units <- ncatt_get(ncfile, "time", "units")$value

nc_close(ncfile)

# Extract the reference date from the time units
reference_date <- sub(".*since ", "", time_units)



df <- data.frame(
  lon = as.vector(lon),
  lat = as.vector(lat),
  anomaly = as.vector(anomaly),
  date = as.Date(reference_date) + time
)

# Display the first few rows of the data frame
head(df)

temp_anomaly <- rast(destfile)


world_sf <- giscoR::gisco_get_countries(
    spatialtype = "BN"
)


temp_anomaly_april2024 <- terra::subset(
    temp_anomaly,
    time(
        temp_anomaly
    ) == as.Date(
        "2024-04-15"
    )
)

robinson_proj <- "+proj=robin +over"

temp_anomaly_april2024_proj <- terra::project(
    temp_anomaly_april2024,
    robinson_proj
)

world_sf_proj <- sf::st_transform(
    world_sf,
    crs = robinson_proj
)

world_bb <- sf::st_union(
    sf::st_make_grid(
        sf::st_bbox(
            world_sf
        ),
        n = 100
    )
) |>
    sf::st_transform(crs = robinson_proj)



breaks <- classInt::classIntervals(
    terra::values(
        temp_anomaly_april2024_proj
    ),
    n = 8,
    style = "pretty"
)$brks

cols <- hcl.colors(
    n = length(breaks),
    palette = "Temps"
)


theme_for_the_win <- function() {
    theme_void() +
        theme(
            legend.position = "right",
            legend.title = element_text(
                size = 20, color = "grey20"
            ),
            legend.text = element_text(
                size = 15, color = "grey20"
            ),
            plot.title = element_text(
                size = 15, color = "grey40",
                hjust = .5, vjust = -1
            ),
            plot.caption = element_text(
                size = 10, color = "grey40",
                hjust = .5, vjust = 5
            ),
            plot.margin = unit(
                c(
                    t = 0, b = 0,
                    l = 0, r = .5
                ), "lines"
            )
        )
}

map1 <- ggplot() +
    tidyterra::geom_spatraster(
        data = temp_anomaly_april2024_proj
    ) +
    geom_sf(
        data = world_sf_proj,
        color = "grey20",
        linewidth = .5,
        fill = "transparent"
    ) +
    geom_sf(
        data = world_bb,
        color = "grey20",
        linewidth = .15,
        fill = "transparent"
    ) +
    # colorspace::scale_fill_binned_divergingx(
    #     name = "째C",
    #     palette = "Temps",
    #     na.value = "white",
    #     mid = 0,
    #     breaks = breaks
    # ) +
    scale_fill_gradient2(
        name = "째C",
        low = "#089392",
        mid = "#EAE29C",
        high = "#CF597E",
        midpoint = 0,
        breaks = breaks,
        labels = round(breaks, 0),
        na.value = "white"
    ) +
    guides(
        fill = guide_colorbar(
            direction = "vertical",
            barheight = unit(60, units = "mm"),
            barwidth = unit(3, units = "mm"),
            title.position = "top",
            label.position = "left",
            label.hjust = 0,
            title.hjust = .5,
            byrow = FALSE
        )
    ) +
    labs(
        title = "Temperature anomaly for April 2024 (vs. average for 1950-1980)",
        caption = "Data: NASA GISS, Land-Ocean Temperature Index, ERSSTv5, 1200km smoothing"
    ) +
    theme_for_the_win()

ggplotly(map1)

ortho_proj <- "+proj=ortho +lat_0=32.4279 +lon_0=53.688"

temp_anomaly_april2024_ortho <- terra::project(
    temp_anomaly_april2024,
    ortho_proj
)


world_sf_ortho <- world_sf |>
    sf::st_transform(crs = ortho_proj) |>
    dplyr::mutate(
        num_points = mapview::npts(
            geometry,
            by_feature = TRUE
        )
    ) |>
    dplyr::filter(num_points >= 4) # should be filter

map3 <- ggplot() +
    tidyterra::geom_spatraster(
        data = temp_anomaly_april2024_ortho
    ) +
    geom_sf(
        data = world_sf_ortho,
        color = "grey20",
        linewidth = .5,
        fill = "transparent"
    ) +
    colorspace::scale_fill_binned_divergingx(
        name = "째C",
        palette = "Temps",
        na.value = "white",
        mid = 0,
        breaks = breaks
    ) +
    guides(
        fill = guide_colorbar(
            direction = "vertical",
            barheight = unit(60, units = "mm"),
            barwidth = unit(3, units = "mm"),
            title.position = "top",
            label.position = "left",
            label.hjust = 0,
            title.hjust = .5,
            byrow = FALSE
        )
    ) +
    labs(
        title = "Temperature anomaly for April 2024 (vs. average for 1950-1980)",
        caption = "Data: NASA GISS, Land-Ocean Temperature Index, ERSSTv5, 1200km smoothing"
    ) +
    theme_for_the_win()

map3
```
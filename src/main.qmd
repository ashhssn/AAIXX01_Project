---
title: "team_04.qmd"
format: 
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
    warning: false
author: "Ashsyahid, Owen, Sherwyn, Xuan Yu, Nigel"
number_sections: false
knitr:
  opts_chunk:
    message: false
---

```{r}
#| label: load-packages
#| warning: false
#| echo: false

library(ncdf4)
library(reshape2)
library(plotly)
library(dplyr)
library(sf)
library(rnaturalearth)
```

```{r}
#| warning: false
#| echo: false
#| label: categorize-location-function

categorize_location <- function(lat, lon) {
  if (lat > 23.5 & lat < 66.5) {
    return("Temperate Northern Hemisphere")
  } else if (lat > -23.5 & lat < 23.5) {
    return("Tropics")
  } else if (lat > -66.5 & lat < -23.5) {
    return("Temperate Southern Hemisphere")
  } else if (lat >= 66.5) {
    return("Polar Northern Hemisphere")
  } else if (lat <= -66.5) {
    return("Polar Southern Hemisphere")
  } else {
    return("Unknown")
  }
}

```

# This one is done for the time being except the animation
```{r}
#| warning: false
#| echo: false
#| label: load-data

# Open the NetCDF file
ncfile <- nc_open("data/gistemp1200_GHCNv4_ERSSTv5.nc")

# Extract variables
lat <- ncvar_get(ncfile, "lat")
lon <- ncvar_get(ncfile, "lon")
time <- ncvar_get(ncfile, "time")
anomaly <- ncvar_get(ncfile, "tempanomaly")

# Extract attributes
scale_factor <- ncatt_get(ncfile, "tempanomaly", "scale_factor")$value
fill_value <- ncatt_get(ncfile, "tempanomaly", "_FillValue")$value

# Convert time variable to date
time_units <- ncatt_get(ncfile, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
date <- origin + time

# Apply scale factor and handle missing values
anomaly <- ifelse(anomaly == fill_value, NA, anomaly) * scale_factor

# Reshape the data into a long format dataframe
df <- expand.grid(lon = lon, lat = lat, time = date)
df$anomaly <- as.vector(anomaly)

# UNCOMMENT THE CHUNK BELOW WHEN NECESSARY
# df$geographical_zone <- mapply(categorize_location, df$lat, df$lon)

# Close the NetCDF file
nc_close(ncfile)

# Display the first few rows of the dataframe
head(df)

```


```{r}
#| warning: false
#| echo: false
#| label: plot-1


# Assuming 'df' is already defined as your dataframe with temperature anomaly data

# Filter data for the desired date (example date)
date_to_plot <- as.Date("2024-04-15")
df_subset <- df[df$time == date_to_plot, ]

# Create the plot
plot <- plot_ly(df_subset,
  type = "scattergeo", mode = "markers",
  lon = ~lon, lat = ~lat,
  marker = list(
    size = 10,
    symbol = "square",
    opacity = 0.1,
    color = ~anomaly,
    colorscale = "RdBu",
    colorbar = list(title = "Temperature Anomaly (C)")
  ),
  text = paste(
    "Longitude: ", df_subset$lon, "<br>Latitude: ", df_subset$lat,
    "<br>Temperature Anomaly: ", df_subset$anomaly
  )
) %>%
  layout(
    title = paste("Temperature Anomaly on", date_to_plot),
    geo = list(
      projection = list(type = "natural earth"),
      showcountries = TRUE, # Show country borders
      countrycolor = "black", # Country border color
      showframe = FALSE
    )
  )

# Show the plot
plot
```

```{r}
#| warning: false
#| echo: false
#| label: plot-2

# Create the 3D globe plot
plot <- plot_ly(df_subset,
  type = "scattergeo",
  lon = ~lon, lat = ~lat,
  marker = list(
    size = 10,
    symbol = "circle",
    opacity = 0.5,
    color = ~anomaly,
    colorscale = "RdBu",
    colorbar = list(title = "Temperature Anomaly (C)")
  ),
  text = paste(
    "Longitude: ", df_subset$lon, "<br>Latitude: ", df_subset$lat,
    "<br>Temperature Anomaly: ", df_subset$anomaly
  )
) %>%
  layout(
    title = paste("Temperature Anomaly on", date_to_plot),
    geo = list(
      projection = list(
        type = "orthographic", # Use orthographic projection for 3D globe effect
        rotation = list(lon = 0, lat = 0, roll = 0) # Set initial view
      ),
      showcountries = TRUE,
      countrycolor = "rgb(50, 50, 50)"
    )
  )

# Show the plot
plot
```

# How to animate the plot
```{r}
#| warning: false
#| echo: false
#| label: plot-sampled-data


set.seed(123) # Setting seed for reproducibility

# Generate random data: Temperature anomalies over different years for specific locations
n <- 100 # Number of data points
df_sample <- data.frame(
  lon = runif(n, min = -180, max = 180), # Random longitudes
  lat = runif(n, min = -90, max = 90), # Random latitudes
  year = sample(seq(2000, 2020, by = 5), n, replace = TRUE), # Random years between 2000 and 2020
  anomaly = runif(n, min = -5, max = 5) # Random anomalies between -5 and 5 degrees Celsius
)

df_sample$geographical_zone <- mapply(categorize_location, df_sample$lat, df_sample$lon)

# Create the 3D globe plot
plot <- plot_ly(df_sample) %>%
  add_trace(
    type = "scattergeo",
    mode = "markers",
    lon = ~lon,
    lat = ~lat,
    frame = ~year,
    marker = list(
      size = 10,
      symbol = "circle",
      opacity = 0.5,
      color = ~anomaly,
      colorscale = "RdBu",
      colorbar = list(title = "Temperature Anomaly (Â°C)")
    ),
    text = ~ paste("Longitude: ", lon, "<br>Latitude: ", lat, "<br>Temperature Anomaly: ", anomaly)
  ) %>%
  layout(
    title = "Temperature Anomaly Over Time",
    geo = list(
      projection = list(
        type = "orthographic",
        rotation = list(lon = 0, lat = 0, roll = 0)
      ),
      showcountries = TRUE,
      countrycolor = "rgb(50, 50, 50)"
    )
  ) %>%
  animation_opts(
    frame = 1000, # Duration of each frame in milliseconds
    transition = 0, # Duration of transition between frames
    easing = "linear" # Animation easing function
  ) %>%
  animation_slider(
    currentvalue = list(prefix = "Year: ", font = list(size = 20))
  )

# Show the plot
plot
```

```{r}
#| warning: false
#| echo: false
#| label: choropleth-country-plot

# Load country boundaries
world <- ne_countries(scale = "medium", returnclass = "sf")

# Convert the data to an sf object
df_sf <- st_as_sf(df_sample, coords = c("lon", "lat"), crs = 4326)

# Perform spatial join to add country names to the data
df_with_country <- st_join(df_sf, world["name"])

# Extract the coordinates back into separate columns
df_with_country <- df_with_country %>%
  mutate(
    lon = st_coordinates(.)[, 1],
    lat = st_coordinates(.)[, 2]
  )

# Create the plot
plot <- plot_ly(df_with_country,
  type = "scattergeo", mode = "markers",
  lon = ~lon, lat = ~lat,
  marker = list(
    size = 10,
    symbol = "square",
    opacity = 0.1,
    color = ~anomaly,
    colorscale = "RdBu",
    colorbar = list(title = "Temperature Anomaly (C)")
  ),
  text = ~ paste(
    "Country: ", name, "<br>Longitude: ", lon, "<br>Latitude: ", lat,
    "<br>Temperature Anomaly: ", anomaly, "<br>Geographical Zone: ", geographical_zone
  )
) %>%
  layout(
    title = paste("Temperature Anomaly on", date_to_plot),
    geo = list(
      projection = list(type = "natural earth"),
      showcountries = TRUE, # Show country borders
      countrycolor = "black", # Country border color
      countrywidth = 1.5, # Increase the country border weight
      showframe = FALSE
    )
  )
```

```{r}
#| warning: false
#| echo: false
#| label: 3d-globe-country-plot

# Create the 3D globe plot with country hover information
plot <- plot_ly(df_with_country,
  type = "scattergeo",
  lon = ~lon, lat = ~lat,
  marker = list(
    size = 10,
    symbol = "circle",
    opacity = 0.5,
    color = ~anomaly,
    colorscale = "RdBu",
    colorbar = list(title = "Temperature Anomaly (C)")
  ),
  text = ~ paste(
    "Country: ", name, "<br>Longitude: ", lon, "<br>Latitude: ", lat,
    "<br>Temperature Anomaly: ", round(anomaly, 3), "<br>Geographical Zone: ", geographical_zone
  )
) %>%
  layout(
    title = paste("Temperature Anomaly on", date_to_plot),
    geo = list(
      projection = list(
        type = "orthographic", # Use orthographic projection for 3D globe effect
        rotation = list(lon = 0, lat = 0, roll = 0) # Set initial view
      ),
      showcountries = TRUE,
      countrycolor = "rgb(50, 50, 50)",
      countrywidth = 1.5 # Increase the country border weight
    )
  )

# Show the plot
plot
```

---
title: "team_04.qmd"
format: 
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
    warning: false
author: "Ashsyahid, Owen, Sherwyn, Xuan Yu, Nigel"
number_sections: false
knitr:
  opts_chunk:
    message: false
---

```{r}
#| label: load-packages
#| warning: false
#| echo: false

library(ncdf4)
library(reshape2)
library(plotly)
library(dplyr)
library(sf)
library(rnaturalearth)
```

```{r}
#| warning: false
#| echo: false
#| label: categorize-location-function

categorize_location <- function(lat, lon) {
  if (lat > 23.5 & lat < 66.5) {
    return("Temperate Northern Hemisphere")
  } else if (lat > -23.5 & lat < 23.5) {
    return("Tropics")
  } else if (lat > -66.5 & lat < -23.5) {
    return("Temperate Southern Hemisphere")
  } else if (lat >= 66.5) {
    return("Polar Northern Hemisphere")
  } else if (lat <= -66.5) {
    return("Polar Southern Hemisphere")
  } else {
    return("Unknown")
  }
}

```

# This one is done for the time being except the animation
```{r}
#| warning: false
#| echo: false
#| label: load-data

# Open the NetCDF file
ncfile <- nc_open("data/gistemp1200_GHCNv4_ERSSTv5.nc")

# Extract variables
lat <- ncvar_get(ncfile, "lat")
lon <- ncvar_get(ncfile, "lon")
time <- ncvar_get(ncfile, "time")
anomaly <- ncvar_get(ncfile, "tempanomaly")

# Extract attributes
scale_factor <- ncatt_get(ncfile, "tempanomaly", "scale_factor")$value
fill_value <- ncatt_get(ncfile, "tempanomaly", "_FillValue")$value

# Convert time variable to date
time_units <- ncatt_get(ncfile, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
date <- origin + time

# Apply scale factor and handle missing values
anomaly <- ifelse(anomaly == fill_value, NA, anomaly) * scale_factor

# Reshape the data into a long format dataframe
df <- expand.grid(lon = lon, lat = lat, time = date)
df$anomaly <- as.vector(anomaly)

# UNCOMMENT THE CHUNK BELOW WHEN NECESSARY
# df$geographical_zone <- mapply(categorize_location, df$lat, df$lon)

# Close the NetCDF file
nc_close(ncfile)

# Display the first few rows of the dataframe
head(df)

```

# Data Cleaning
```{r}
library(dplyr)
library(zoo)
library(naniar)

# Filter the data for years 1960 to 2024
df_filtered <- df[df$time >= as.Date("1960-01-01") & df$time <= as.Date("2024-12-31"), ]

# Display the first few rows of the filtered dataframe
head(df_filtered)

# Check if there are any NA values in the dataframe
any_na <- any(is.na(df_filtered))
cat("Are there any NA values in the dataframe? ", any_na, "\n")

# Count the number of NA values for each column
na_count <- colSums(is.na(df_filtered))
print("Number of NA values in each column:")
print(na_count)

# Inspect rows with NA values (optional, only if needed for deeper inspection)
na_rows <- df_filtered[!complete.cases(df_filtered), ]
print(head(na_rows))

# Impute missing values using linear interpolation
df_filtered_interpolated <- df_filtered
df_filtered_interpolated$anomaly <- na.approx(df_filtered_interpolated$anomaly, na.rm = FALSE)

# Add a column to identify the type of data
df_filtered$type <- "Original"
df_filtered_interpolated$type <- "Interpolated"

# Combine the original and interpolated data
df_combined <- bind_rows(df_filtered, df_filtered_interpolated)

# Ensure the combined dataframe has the same structure
df_combined <- df_combined %>%
  select(lon, lat, time, anomaly, type)

# Summarize mean anomaly per year for both original and interpolated data
df_combined_summary <- df_combined %>%
  mutate(year = as.numeric(format(time, "%Y"))) %>%
  group_by(year, type) %>%
  summarize(mean_anomaly = mean(anomaly, na.rm = TRUE), .groups = 'drop')

# Create the line graph using ggplot2
ggplot(df_combined_summary, aes(x = year, y = mean_anomaly, color = type)) +
  geom_line() +
  labs(title = "Temperature Anomaly Trend Before and After Interpolation",
       x = "Year",
       y = "Mean Temperature Anomaly") +
  theme_minimal()

any_na_interpolated <- any(is.na(df_filtered_interpolated))
na_count_interpolated <- colSums(is.na(df_filtered_interpolated))
cat("Number of NA values in each column after interpolation:\n")
print(na_count_interpolated)
cat("First few rows after interpolation:\n")
print(head(df_filtered_interpolated))

# Finding Mean Temp anomaly for each year
# Step 1: Extract the year from the date in the df_filtered_interpolated dataframe
df_filtered_interpolated <- df_filtered_interpolated |>
  mutate(year = as.numeric(format(time, "%Y")))

# Step 2: Group by year
# Step 3: Calculate the mean temperature anomaly for each year
yearly_mean_anomaly <- df_filtered_interpolated |>
  group_by(year, lon, lat) %>%
  summarize(mean_anomaly = mean(anomaly, na.rm = TRUE), .groups = 'drop')

# Ensure the year column is of type character for plotly
yearly_mean_anomaly$year <- as.character(yearly_mean_anomaly$year)

# Print structure and summary of the dataframe
cat("Structure of yearly_mean_anomaly dataframe:\n")
str(yearly_mean_anomaly)

cat("\nSummary of yearly_mean_anomaly dataframe:\n")
summary(yearly_mean_anomaly)

# Print first few rows of the dataframe
cat("\nFirst few rows of yearly_mean_anomaly dataframe:\n")
print(head(yearly_mean_anomaly))

# Check if all columns have the same length
cat("\nLength of each column in yearly_mean_anomaly dataframe:\n")
cat("Year column length: ", length(yearly_mean_anomaly$year), "\n")
cat("Lon column length: ", length(yearly_mean_anomaly$lon), "\n")
cat("Lat column length: ", length(yearly_mean_anomaly$lat), "\n")
cat("Mean anomaly column length: ", length(yearly_mean_anomaly$mean_anomaly), "\n")

```

---
title: "team_04.qmd"
format: 
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
    warning: false
author: "Ashsyahid, Owen, Sherwyn, Xuan Yu, Nigel"
number_sections: false
knitr:
  opts_chunk:
    message: false
---

```{r}
#| label: load-packages
#| warning: false
#| echo: false

library(ncdf4)
library(reshape2)
library(plotly)
library(dplyr)
library(sf)
library(rnaturalearth)
library(zoo)
library(naniar)
```

```{r}
#| warning: false
#| echo: false
#| label: categorize-location-function

categorize_location <- function(lat, lon) {
  if (lat > 23.5 & lat < 66.5) {
    return("Temperate Northern Hemisphere")
  } else if (lat > -23.5 & lat < 23.5) {
    return("Tropics")
  } else if (lat > -66.5 & lat < -23.5) {
    return("Temperate Southern Hemisphere")
  } else if (lat >= 66.5) {
    return("Polar Northern Hemisphere")
  } else if (lat <= -66.5) {
    return("Polar Southern Hemisphere")
  } else {
    return("Unknown")
  }
}

```

# Data Pre-processing

## Load data and assign to dataframe
```{r}
#| warning: false
#| echo: true
#| label: load-data

# Open the NetCDF file
ncfile <- nc_open("data/gistemp1200_GHCNv4_ERSSTv5.nc")

# Extract variables
lat <- ncvar_get(ncfile, "lat")
lon <- ncvar_get(ncfile, "lon")
time <- ncvar_get(ncfile, "time")
anomaly <- ncvar_get(ncfile, "tempanomaly")

# Extract attributes
scale_factor <- ncatt_get(ncfile, "tempanomaly", "scale_factor")$value
fill_value <- ncatt_get(ncfile, "tempanomaly", "_FillValue")$value

# Convert time variable to date
time_units <- ncatt_get(ncfile, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
date <- origin + time

# Apply scale factor and handle missing values
anomaly <- ifelse(anomaly == fill_value, NA, anomaly) * (scale_factor * 10)

# Reshape the data into a long format dataframe
df <- expand.grid(lon = lon, lat = lat, time = date)
df$anomaly <- as.vector(anomaly)

# UNCOMMENT THE CHUNK BELOW WHEN NECESSARY
# df$geographical_zone <- mapply(categorize_location, df$lat, df$lon)

# Close the NetCDF file
nc_close(ncfile)

# Display the first few rows of the dataframe
head(df)

```

## Check for Missing Values & filling missing values with linear interpolation
```{r}
#| warning: false
#| echo: true
#| label: data-cleaning

# Filter the data for years 1960 to 2024
df <- df[df$time >= as.Date("1960-01-01") & df$time <= as.Date("2024-12-31"), ]

# Count the number of NA values for each column
na_count <- colSums(is.na(df))
print("Number of NA values in each column:")
print(na_count)

# Inspect rows with NA values
na_rows <- df[!complete.cases(df), ]
print(head(na_rows))

# Create a copy of the original data before interpolation for comparison in the line graph
df_original <- df

# Impute missing values using linear interpolation
df$anomaly <- na.approx(df$anomaly, na.rm = FALSE)

any_na_interpolated <- any(is.na(df))
na_count_interpolated <- colSums(is.na(df))
cat("Number of NA values in each column after interpolation:")
print(na_count_interpolated)
cat("First few rows after interpolation:")
print(head(df))

# Create a copy of the interpolated data for comparison in the line graph
df_interpolated <- df
```

## Feature Engineering - Mean Temp anomaly for each year
```{r}
#| warning: false
#| echo: true
#| label: feature-engineering

# Finding Mean Temp anomaly for each year
# Step 1: Extract the year from the date in the df data frame
df <- df |> mutate(year = as.numeric(format(time, "%Y")))

# Step 2: Group by year
# Step 3: Calculate the mean temperature anomaly for each year
df_clean <- df |> group_by(year, lon, lat) |>
  summarize(mean_anomaly = mean(anomaly, na.rm = TRUE), .groups = 'drop')

# Ensure the year column is of type character for plotly
df_clean$year <- as.character(df_clean$year)
```

## Line Graph for comparison of temperature anomaly trend before and after interpolation
```{r}
#| warning: false
#| echo: false
#| label: line-graph

# Add a column to identify the type of data
df_original$type <- "Original"
df_interpolated$type <- "Interpolated"

# Combine the original and interpolated data
df_combined <- bind_rows(df_original, df_interpolated)

# Ensure the combined dataframe has the same structure
df_combined <- df_combined |> select(lon, lat, time, anomaly, type)

# Summarize mean anomaly per year for both original and interpolated data
df_combined_summary <- df_combined |>
  mutate(year = as.numeric(format(time, "%Y"))) |>
  group_by(year, type) |>
  summarize(mean_anomaly = mean(anomaly, na.rm = TRUE), .groups = 'drop')

# Create the line graph using ggplot2
ggplot(df_combined_summary, aes(x = year, y = mean_anomaly, color = type)) +
  geom_line() +
  labs(title = "Temperature Anomaly Trend Before and After Interpolation",
       x = "Year",
       y = "Mean Temperature Anomaly") +
  theme_minimal()
```

## Exporting data frame to csv
```{r}
#| warning: false
#| echo: true
#| label: export-df

write.csv(df_clean, "data/df_filtered.csv", row.names = FALSE)
```

# Data Visualization


